##
# Properties for the Grammaticus library
# Stored in a resource bundle as it's the lowest common denominator of configuration in javaland
#

# If you want to override the language provider on startup, replace this with a class that
# can be instantiates as a subclass of LanguageProvider
#LanguageProvider=

# The file that is the "root" label file that contains the reference to all of the other files to import
rootLabelFile=labels.xml

# The file that contains the nouns/adjectives for a given language
rootDictionaryFile=names.xml

# Canonical names of files that have dictionary entries instead of labels
dictionaryFileNames=names.xml,adjectives.xml

# Missing label prefix appended when a referenced label is missing
missingLabelPrefix=__MISSING LABEL__\u0020

# Whether duplicated labels (same section/key in the label files) should be logged
logDuplicateLabels=false

# Whether to cache label sets in memory; you really want this to be true.
cacheLabelSets=true

# Where to store the cache.
cacheDir=target/ncache

#
# Contains a comma separated set of section names that are OK to not be translated.
nonTranslatedSections=UiSkin,LanguageName

# Should we fail on a language we don't understand, or should we roll with it?
failOnMissingDeclension=true

# Whether to respect HumanLanguage.isTranslatedLanguage() and skip unnecessary parsing for better performance.
# Set to false for the original behavior (that tries to parse labels for any language)
useTranslatedLanguage=false

# if true, parser loads dictionary but skips parsing label file (labels.xml)
# Only used for platform langauge that has unique declension (e.g. haw) and useTranslatedLanguage=true.
skipParsingLabelForPlatformLanguage=false

# GrammaticalLabelSetLoader:
# enable cache stats
loader.cache.stats=false

# expiration after access in minute. never expires for 0.
loader.cache.expireAfter=0

# maximum size of cache entry. This cache key is LabelSetDescriptor(language). no limit for 0.
loader.cache.maxSize=0

# use Caffeine as internal cache otherwise, Guava LoadingCache will be used.
loader.cache.useCaffeine=true
